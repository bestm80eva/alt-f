diff -Nur linux-2.6.35-orig/fs/squashfs/decompressor.c linux-2.6.35/fs/squashfs/decompressor.c
--- linux-2.6.35-orig/fs/squashfs/decompressor.c	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/fs/squashfs/decompressor.c	2010-08-15 00:13:32.000000000 +0100
@@ -50,7 +50,11 @@
 
 static const struct squashfs_decompressor *decompressor[] = {
 	&squashfs_zlib_comp_ops,
+#ifdef CONFIG_SQUASHFS_LZMA
+	&squashfs_lzma_comp_ops,
+#else
 	&squashfs_lzma_unsupported_comp_ops,
+#endif
 	&squashfs_lzo_unsupported_comp_ops,
 	&squashfs_unknown_comp_ops
 };
diff -Nur linux-2.6.35-orig/fs/squashfs/Kconfig linux-2.6.35/fs/squashfs/Kconfig
--- linux-2.6.35-orig/fs/squashfs/Kconfig	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/fs/squashfs/Kconfig	2010-08-15 00:08:38.000000000 +0100
@@ -4,14 +4,14 @@
 	select ZLIB_INFLATE
 	help
 	  Saying Y here includes support for SquashFS 4.0 (a Compressed
-	  Read-Only File System).  Squashfs is a highly compressed read-only
-	  filesystem for Linux.  It uses zlib compression to compress both
-	  files, inodes and directories.  Inodes in the system are very small
-	  and all blocks are packed to minimise data overhead. Block sizes
-	  greater than 4K are supported up to a maximum of 1 Mbytes (default
-	  block size 128K).  SquashFS 4.0 supports 64 bit filesystems and files
-	  (larger than 4GB), full uid/gid information, hard links and
-	  timestamps.  
+	  Read-Only File System).  Squashfs is a highly compressed read-only	  filesystem for Linux.  It uses zlib compression to compress both
+	  filesystem for Linux.  It uses zlib or lzma compression to compress
+	  both files, inodes and directories.  Inodes in the system are very
+	  small and all blocks are packed to minimise data overhead. Block
+	  sizes greater than 4K are supported up to a maximum of 1 Mbytes
+	  (default block size 128K).  SquashFS 4.0 supports 64 bit filesystems
+	  and files (larger than 4GB), full uid/gid information, hard links and
+	  timestamps.
 
 	  Squashfs is intended for general read-only filesystem use, for
 	  archival use (i.e. in cases where a .tar.gz file may be used), and in
@@ -26,6 +26,12 @@
 
 	  If unsure, say N.
 
+config SQUASHFS_LZMA
+	bool "Include support for LZMA compressed file systems"
+	depends on SQUASHFS
+	select DECOMPRESS_LZMA
+	select DECOMPRESS_LZMA_NEEDED
+
 config SQUASHFS_XATTRS
 	bool "Squashfs XATTR support"
 	depends on SQUASHFS
@@ -38,7 +44,6 @@
 	  If unsure, say N.
 
 config SQUASHFS_EMBEDDED
-
 	bool "Additional option for memory-constrained systems" 
 	depends on SQUASHFS
 	default n
diff -Nur linux-2.6.35-orig/fs/squashfs/lzma_wrapper.c linux-2.6.35/fs/squashfs/lzma_wrapper.c
--- linux-2.6.35-orig/fs/squashfs/lzma_wrapper.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.35/fs/squashfs/lzma_wrapper.c	2010-08-15 00:07:50.000000000 +0100
@@ -0,0 +1,152 @@
+/*
+ * Squashfs - a compressed read only filesystem for Linux
+ *
+ * Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
+ * Phillip Lougher <phillip@lougher.demon.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2,
+ * or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * lzma_wrapper.c
+ */
+
+#include <asm/unaligned.h>
+#include <linux/buffer_head.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/vmalloc.h>
+#include <linux/decompress/unlzma.h>
+
+#include "squashfs_fs.h"
+#include "squashfs_fs_sb.h"
+#include "squashfs_fs_i.h"
+#include "squashfs.h"
+#include "decompressor.h"
+
+struct squashfs_lzma {
+	void	*input;
+	void	*output;
+};
+
+/* decompress_unlzma.c is currently non re-entrant... */
+DEFINE_MUTEX(lzma_mutex);
+
+/* decompress_unlzma.c doesn't provide any context in its callbacks... */
+static int lzma_error;
+
+static void error(char *m)
+{
+	ERROR("unlzma error: %s\n", m);
+	lzma_error = 1;
+}
+
+
+static void *lzma_init(struct squashfs_sb_info *msblk)
+{
+	struct squashfs_lzma *stream = kzalloc(sizeof(*stream), GFP_KERNEL);
+	if (stream == NULL)
+		goto failed;
+	stream->input = vmalloc(msblk->block_size);
+	if (stream->input == NULL)
+		goto failed;
+	stream->output = vmalloc(msblk->block_size);
+	if (stream->output == NULL)
+		goto failed2;
+
+	return stream;
+
+failed2:
+	vfree(stream->input);
+failed:
+	ERROR("failed to allocate lzma workspace\n");
+	kfree(stream);
+	return NULL;
+}
+
+
+static void lzma_free(void *strm)
+{
+	struct squashfs_lzma *stream = strm;
+
+	if (stream) {
+		vfree(stream->input);
+		vfree(stream->output);
+	}
+	kfree(stream);
+}
+
+
+static int lzma_uncompress(struct squashfs_sb_info *msblk, void **buffer,
+	struct buffer_head **bh, int b, int offset, int length, int srclength,
+	int pages)
+{
+	struct squashfs_lzma *stream = msblk->stream;
+	void *buff = stream->input;
+	int avail, i, bytes = length, res;
+
+	mutex_lock(&lzma_mutex);
+
+	for (i = 0; i < b; i++) {
+		wait_on_buffer(bh[i]);
+		if (!buffer_uptodate(bh[i]))
+			goto block_release;
+
+		avail = min(bytes, msblk->devblksize - offset);
+		memcpy(buff, bh[i]->b_data + offset, avail);
+		buff += avail;
+		bytes -= avail;
+		offset = 0;
+		put_bh(bh[i]);
+	}
+
+	lzma_error = 0;
+	res = unlzma(stream->input, length, NULL, NULL, stream->output, NULL,
+							error);
+	if (res || lzma_error)
+		goto failed;
+
+	/* uncompressed size is stored in the LZMA header (5 byte offset) */
+	res = bytes = get_unaligned_le32(stream->input + 5);
+	for (i = 0, buff = stream->output; bytes && i < pages; i++) {
+		avail = min_t(int, bytes, PAGE_CACHE_SIZE);
+		memcpy(buffer[i], buff, avail);
+		buff += avail;
+		bytes -= avail;
+	}
+	if (bytes)
+		goto failed;
+
+	mutex_unlock(&lzma_mutex);
+	return res;
+
+block_release:
+	for (; i < b; i++)
+		put_bh(bh[i]);
+
+failed:
+	mutex_unlock(&lzma_mutex);
+
+	ERROR("lzma decompression failed, data probably corrupt\n");
+	return -EIO;
+}
+
+const struct squashfs_decompressor squashfs_lzma_comp_ops = {
+	.init = lzma_init,
+	.free = lzma_free,
+	.decompress = lzma_uncompress,
+	.id = LZMA_COMPRESSION,
+	.name = "lzma",
+	.supported = 1
+};
+
diff -Nur linux-2.6.35-orig/fs/squashfs/Makefile linux-2.6.35/fs/squashfs/Makefile
--- linux-2.6.35-orig/fs/squashfs/Makefile	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/fs/squashfs/Makefile	2010-08-15 00:10:38.000000000 +0100
@@ -5,5 +5,6 @@
 obj-$(CONFIG_SQUASHFS) += squashfs.o
 squashfs-y += block.o cache.o dir.o export.o file.o fragment.o id.o inode.o
 squashfs-y += namei.o super.o symlink.o zlib_wrapper.o decompressor.o
+squashfs-$(CONFIG_SQUASHFS_LZMA) += lzma_wrapper.o
 squashfs-$(CONFIG_SQUASHFS_XATTRS) += xattr.o xattr_id.o
 
diff -Nur linux-2.6.35-orig/fs/squashfs/squashfs.h linux-2.6.35/fs/squashfs/squashfs.h
--- linux-2.6.35-orig/fs/squashfs/squashfs.h	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/fs/squashfs/squashfs.h	2010-08-15 00:20:50.000000000 +0100
@@ -104,3 +104,6 @@
 
 /* zlib_wrapper.c */
 extern const struct squashfs_decompressor squashfs_zlib_comp_ops;
+
+/* lzma wrapper.c */
+extern const struct squashfs_decompressor squashfs_lzma_comp_ops;
diff -Nur linux-2.6.35-orig/fs/squashfs/symlink.c linux-2.6.35/fs/squashfs/symlink.c
--- linux-2.6.35-orig/fs/squashfs/symlink.c	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/fs/squashfs/symlink.c	2010-08-15 00:24:21.000000000 +0100
@@ -33,6 +33,7 @@
 #include <linux/fs.h>
 #include <linux/vfs.h>
 #include <linux/kernel.h>
+#include <linux/slab.h>
 #include <linux/string.h>
 #include <linux/pagemap.h>
 #include <linux/xattr.h>
diff -Nur linux-2.6.35-orig/include/linux/decompress/bunzip2_mm.h linux-2.6.35/include/linux/decompress/bunzip2_mm.h
--- linux-2.6.35-orig/include/linux/decompress/bunzip2_mm.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.35/include/linux/decompress/bunzip2_mm.h	2010-08-15 00:41:35.000000000 +0100
@@ -0,0 +1,13 @@
+#ifndef BUNZIP2_MM_H
+#define BUNZIP2_MM_H
+
+#ifdef STATIC
+/* Code active when included from pre-boot environment: */
+#define INIT
+#else
+/* Compile for initramfs/initrd code only */
+#define INIT __init
+static void(*error)(char *m);
+#endif
+
+#endif
diff -Nur linux-2.6.35-orig/include/linux/decompress/inflate_mm.h linux-2.6.35/include/linux/decompress/inflate_mm.h
--- linux-2.6.35-orig/include/linux/decompress/inflate_mm.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.35/include/linux/decompress/inflate_mm.h	2010-08-15 00:41:35.000000000 +0100
@@ -0,0 +1,13 @@
+#ifndef INFLATE_MM_H
+#define INFLATE_MM_H
+
+#ifdef STATIC
+/* Code active when included from pre-boot environment: */
+#define INIT
+#else
+/* Compile for initramfs/initrd code only */
+#define INIT __init
+static void(*error)(char *m);
+#endif
+
+#endif
diff -Nur linux-2.6.35-orig/include/linux/decompress/unlzma_mm.h linux-2.6.35/include/linux/decompress/unlzma_mm.h
--- linux-2.6.35-orig/include/linux/decompress/unlzma_mm.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.35/include/linux/decompress/unlzma_mm.h	2010-08-15 00:41:35.000000000 +0100
@@ -0,0 +1,20 @@
+#ifndef UNLZMA_MM_H
+#define UNLZMA_MM_H
+
+#ifdef STATIC
+
+/* Code active when included from pre-boot environment: */
+#define INIT
+
+#elif defined(CONFIG_DECOMPRESS_LZMA_NEEDED)
+
+/* Make it available to non initramfs/initrd code */
+#define INIT
+#include <linux/module.h>
+#else
+
+/* Compile for initramfs/initrd code only */
+#define INIT __init
+#endif
+
+#endif
diff -Nur linux-2.6.35-orig/include/linux/decompress/unlzo_mm.h linux-2.6.35/include/linux/decompress/unlzo_mm.h
--- linux-2.6.35-orig/include/linux/decompress/unlzo_mm.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.35/include/linux/decompress/unlzo_mm.h	2010-08-15 00:41:35.000000000 +0100
@@ -0,0 +1,13 @@
+#ifndef UNLZO_MM_H
+#define UNLZO_MM_H
+
+#ifdef STATIC
+/* Code active when included from pre-boot environment: */
+#define INIT
+#else
+/* Compile for initramfs/initrd code only */
+#define INIT __init
+static void(*error)(char *m);
+#endif
+
+#endif
diff -Nur linux-2.6.35-orig/lib/decompress_bunzip2.c linux-2.6.35/lib/decompress_bunzip2.c
--- linux-2.6.35-orig/lib/decompress_bunzip2.c	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/lib/decompress_bunzip2.c	2010-08-15 00:50:54.000000000 +0100
@@ -52,6 +52,7 @@
 #include <linux/slab.h>
 #endif /* STATIC */
 
+#include <linux/decompress/bunzip2_mm.h>
 #include <linux/decompress/mm.h>
 
 #ifndef INT_MAX
diff -Nur linux-2.6.35-orig/lib/decompress_inflate.c linux-2.6.35/lib/decompress_inflate.c
--- linux-2.6.35-orig/lib/decompress_inflate.c	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/lib/decompress_inflate.c	2010-08-15 00:51:26.000000000 +0100
@@ -23,6 +23,7 @@
 
 #endif /* STATIC */
 
+#include <linux/decompress/inflate_mm.h>
 #include <linux/decompress/mm.h>
 
 #define GZIP_IOBUF_SIZE (16*1024)
diff -Nur linux-2.6.35-orig/lib/decompress_unlzma.c linux-2.6.35/lib/decompress_unlzma.c
--- linux-2.6.35-orig/lib/decompress_unlzma.c	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/lib/decompress_unlzma.c	2010-08-15 00:52:05.000000000 +0100
@@ -36,6 +36,7 @@
 #include <linux/slab.h>
 #endif /* STATIC */
 
+#include <linux/decompress/unlzma_mm.h>
 #include <linux/decompress/mm.h>
 
 #define	MIN(a, b) (((a) < (b)) ? (a) : (b))
diff -Nur linux-2.6.35-orig/lib/decompress_unlzo.c linux-2.6.35/lib/decompress_unlzo.c
--- linux-2.6.35-orig/lib/decompress_unlzo.c	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/lib/decompress_unlzo.c	2010-08-15 00:52:51.000000000 +0100
@@ -39,6 +39,7 @@
 
 #include <linux/types.h>
 #include <linux/lzo.h>
+#include <linux/decompress/unlzo_mm.h>
 #include <linux/decompress/mm.h>
 
 #include <linux/compiler.h>
diff -Nur linux-2.6.35-orig/lib/Kconfig linux-2.6.35/lib/Kconfig
--- linux-2.6.35-orig/lib/Kconfig	2010-08-01 23:11:14.000000000 +0100
+++ linux-2.6.35/lib/Kconfig	2010-08-15 00:55:55.000000000 +0100
@@ -121,6 +121,9 @@
 	select LZO_DECOMPRESS
 	tristate
 
+config DECOMPRESS_LZMA_NEEDED
+	 boolean
+
 #
 # Generic allocator support is selected if needed
 #
