#!/bin/sh

exec >& /dev/console

echo "rcE: Starting reboot/shutdown"

echo "rcE: stopping all services"
# Stop all executable init scripts in /etc/init.d
# executing them in reverse numerical order.
rcall stop

# wait for services to stop
sleep 5

# force kill resilient processes
killall5 -KILL

sleep 1

#if test -x /usr/sbin/lvm; then
#	mkdir -p /tmp/lvm
#	cp /lib/libdevmapper.so.1.02 /usr/sbin/lvm /tmp/lvm
#fi

echo "rcE: unmounting aufs "
if aufs.sh -s >& /dev/null ; then
	aufs.sh -u
fi

echo "rcE: unmounting all mounted filesystems"
for i in nfs cifs iso9660 ext2 ext3 ext4 vfat ntfs; do
		umount -t $i -rf -a 
done

echo "rcE: stopping RAID"
for i in /dev/md[0-9]; do
  if test -b $i; then
	mdadm --stop $i
  fi
done

#if test -x /tmp/lvm; then
#	echo "rcE: stopping LVM"
#	mv /tmp/lvm/libdevmapper.so.1.02 /lib
#	mv /tmp/lvm/lvm /usr/sbin/
#	lvm vgchange -a n
#fi

echo "rcE: unmouting tmpfs /tmp"
umount /tmp

echo "rcE: stopping swap"
for i in $(cat /proc/swaps | grep -o '/dev/.* '); do
	swapoff $i
done

echo "rcE: ejecting all drives"
# umount attached disks/partitions, simulating kernel hotplug events
# hot.sh removes branch from aufs (if dir /Alt-F belongs to device)
# just a last resort, as this is already done above
for i in /dev/sd[a-z]; do
  if test -b $i; then
	eject $(basename $i)
  fi
done

echo "rcE: still mounted filesystems"
mount

echo "rcE: saving date and time to RTC"
# write system time to RTC, waiting for second change
i=0; o="$(date +%s)"
while test "$o" = "$(date +%s)" -a "$i" -lt 200; do i=$((i+1)); done
hwclock -wu

echo "rcE: bringing network down"
ifconfig eth0 down

mount / -o remount,ro

# do a kexec to a new kernel/rootfs instead of a reboot
if test -f /root/zImage -o -f /root/rootfs.arm.*; then
	cd /root

	# no kernel image, use flashed kernel
	if ! test -f zImage; then
		dd if=/dev/mtdblock2 of=zImage bs=64 skip=1
	fi
	
	initrfs=$(ls rootfs.arm.*)
	# no rootfs, use flashed rootfs
	if ! test -f "$initrfs" ; then
		dd if=/dev/mtdblock3 of=rootfs.arm.sqmtd bs=64 skip=1
	fi
	
	if test -s "cmdline"; then
		cmdline=$(cat cmdline);
	elif test "$initrfs" = "rootfs.arm.cpio-sq.lzma"; then
		cmdline="! console=ttyS0,115200 squashcpio"
	else # squashrd
		cmdline="! console=ttyS0,115200 root=/dev/ram0 init=/init"
	fi
	
	echo "rcE: starting a new kernel and root filesystem"
	kexec -l zImage --command-line="$cmdline" --initrd="$initrfs" && kexec -e
fi

echo "rcE: Poweroff NOW! "
