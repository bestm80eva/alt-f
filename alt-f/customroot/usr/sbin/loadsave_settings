#!/bin/sh

listchanged() {
	for i in $files /etc/fstab; do
		if test $i -nt $stamp; then
			echo -n "$i "
		fi
	done

	for i in /etc/init.d/S*; do
		# FIXME chmod doesnt change date, and stat is buggy
		if test $i -nt $stamp; then 
			echo -n "$i "
		fi
	done
	echo
}

status() {
	save=0
	if ! test -e $stamp; then
		save=1
	else
		for i in $files /etc/fstab; do
			if test $i -nt $stamp; then
				save=1
				break
			fi
		done

		for i in /etc/init.d/S*; do
			# FIXME chmod doesnt change date, and stat is buggy
			if test $i -nt $stamp; then 
				save=1
				break
			fi
		done
	fi

	if test $save = "0"; then
		echo "No modified files since last save."
	fi

	return $save
}

saveflashdef() { 

	if status; then
		exit 1
	fi

	for i in /etc/init.d/S*; do
		if test -x $i; then
			echo $i
		fi
	done > $initscript_perms

	# special case, only save nfs and cifs mounts,
	# as other entries are hotpluged?
	awk '$3 == "nfs" {print $0} $3 == "cifs" {print $0}' /etc/fstab > /tmp/xfstab
	files="$files /tmp/xfstab $initscript_perms"

	mkdir -p $save_dir
	mount /dev/mtdblock0 $save_dir

# provide some flash wear leveling by writing into a new flash "location"

	cnt=5
	dt=$(date +%F_%T)
	nm=set_$dt.tgz
	tar -czf /tmp/$nm $files > /dev/null 2>&1
	rm /tmp/xfstab
	cp /tmp/$nm $save_dir/ 2>/dev/null
	res=$?
	while test $res = 1 -a "$cnt" -gt 0; do
		cnt=$((cnt-1))
		rm $save_dir/$nm $(ls $save_dir/set_*.tgz | head -1) >& /dev/null
		cp /tmp/$nm $save_dir/ 2>/dev/null
		res=$?
	done

	umount $save_dir

# TODO start using mtdblock1 when mtdblock0 fails

	rm /tmp/$nm $initscript_perms
	rmdir $save_dir

	if test "$res" != 0; then
		echo "Error saving settings! No flash space available."
		exit 1
	fi

	touch $stamp
	exit 0
}

loadflashdef() {

	mkdir -p $save_dir
	mount -o ro /dev/mtdblock0 $save_dir

	if test $# = 0; then
		last=$(ls $save_dir/set_* | tail -1) > /dev/null 2>&1 
	else
		last=$save_dir/$1
	fi

	if test -z "$last"; then
		echo "No settings file found!"
		res=1
	else
		tar -C / -xzf $last
		res=$?
		# special nfs and cifs cases
		#cat /etc/fstab /tmp/xfstab | sort | uniq > /etc/fstab
		cat /tmp/xfstab >> /etc/fstab
		rm /tmp/xfstab
	fi

	umount $save_dir
	rmdir $save_dir

	if test -s $initscript_perms; then
		for i in $(cat $initscript_perms ); do
			chmod +x $i
		done
		rm $initscript_perms
	fi

	touch $stamp
	exit $res
}

# including stock firmware setings! 
clearflashdef() {
	mkdir -p $save_dir
	mount /dev/mtdblock0 $save_dir
	rm -f $save_dir/* 	
	#rm -f $save_dir/sib.conf 
	rm -f $stamp
	umount $save_dir
	rmdir $save_dir
}

listflashdef() {
	mkdir -p $save_dir
	mount /dev/mtdblock0 $save_dir
	(cd $save_dir; ls -1 set_* 2>/dev/null)
	umount $save_dir
	rmdir $save_dir
}

llistflashdef() {
	mkdir -p $save_dir
	mount /dev/mtdblock0 $save_dir
	(cd $save_dir; ls -l set_* 2>/dev/null)
	umount $save_dir
	rmdir $save_dir
}

# from http://bugs.debian.org/cgi-bin/bugreport.cgi?msg=30;filename=oldsys-preseed.patch;att=1;bug=502821
# Parse the sib.conf file, as found in the Dlink DNS-323
# Get the value from a string in the form of var = "value" from a file.
# Named for the sib.conf file on the DNS-323 that this function was
# originally written for.
# $1 = file to read
# $2 = var to read
get_sib_var() {
	grep "^$2[[:space:]]*=" $1 | \
		sed "s/^$2[[:space:]]*=[[:space:]]*\"\(.*\)\"[[:space:]]*$/\1/"
}
 
# from http://bugs.debian.org/cgi-bin/bugreport.cgi?msg=30;filename=oldsys-preseed.patch;att=1;bug=502821
# Parse the sib.conf file, as found in the Dlink DNS-323
# $1 = path to sib.conf
parse_sib_conf() {
	if [ "$(get_sib_var "$1" "CF-IP-DHCP-ENABLE")" != "0" ]; then
		return 1
	fi

	IPADDRESS="$(get_sib_var "$1" "CF-IP-STATIC-IP")"
	NETMASK="$(get_sib_var "$1" "CF-IP-STATIC-IP-NETMASK")"
	GATEWAY="$(get_sib_var "$1" "CF-IP-STATIC-IP-GATEWAY")"
	NS1="$(get_sib_var "$1" "CF-IP-DNS1")"
	NS2="$(get_sib_var "$1" "CF-IP-DNS2")"
	HOSTNAME="$(get_sib_var "$1" "CF-SYS-MODEL-STR")"
	return 0
}

read_sib() {
	mkdir -p $save_dir
	mount /dev/mtdblock0 $save_dir
	if ! test -e $save_dir/$sib; then
		echo "No sib.conf file"
		umount $save_dir
		rmdir $save_dir
		exit 1
	fi

	DOMAIN=$(awk '/^workgroup/{print $3}' $save_dir/smb.default)
	parse_sib_conf $save_dir/$sib
	st=$?

	umount $save_dir
	rmdir $save_dir

	if test $st = 0; then
		echo "ip=$IPADDRESS; mask=$NETMASK; gw=$GATEWAY; \
			ns1=$NS1; ns2=$NS2; host=$HOSTNAME; domain=$DOMAIN"
	fi
	return $st
}

# When a pen/disk is inserted, the current box settings 
# must overwrite the ones existing in the pen/disk, 
# and the reverse must happen when the pen/disk is removed.
# As the pen/disk is the top priority union branch, new or modified
# files are stored there

# Copy current box settings to /Alt-F dir.
# Used after mounting Alt-F dir but before adding it to the union.
to_AltF() {
	wfiles="$files $xfiles"
	for i in $wfiles; do
		if test -e $i -a -e /Alt-F/$i; then
			cp -a $i /Alt-F/$i
		elif test -e /Alt-F/$i; then
			rm -f /Alt-F/$i
		fi 
	done
}

# Copy current box settings in /Alt-F to RAM root dir
# Used after removing Alt-F from the union but before unmounting it
from_AltF() {
	wfiles="$files $xfiles"
	for i in $wfiles; do
		if test -e /Alt-F/$i; then
			rm /Alt-F/$i /$i
		fi
	done
}

usage() {
	echo -e "usage: loadsave_settings \n\
	-lf [file] (load flash) | -sf (save flash) | -cf (clear flash) |\n\
	-ls (list) | -ll (long list) | -lc (list changed) | \n\
	-ta (to Alt-F) | -fa (from Alt-F) | \n\
	-rs (read sib ip) | -st (status)"
	exit 1;
}

stamp=/tmp/settings_saved
save_dir=/tmp/mtd
initscript_perms=/tmp/initd_perms
sib=sib.conf

# FIXME: move this to an independent file
# during initramfs creation create a setting-default.tgz, to
# load when user press the box back button more than 10 seconds.

files="
/etc/dropbear/dropbear_dss_host_key	/etc/dropbear/dropbear_rsa_host_key
/etc/network/interfaces		/etc/web-secret
/etc/passwd	/etc/shadow	/etc/group
/etc/TZ		/etc/timezone
/etc/hosts		/etc/resolv.conf	/etc/hostname
/etc/samba/smbpasswd	/etc/samba/smbusers	/etc/samba/smb.conf
/etc/samba/credentials.*	/etc/exports
/etc/dnsmasq.conf	/etc/dnsmasq-opts	/etc/dnsmasq-hosts 
/etc/dnsmasq-resolv	/etc/rsyncd.conf	/etc/rsyncd.secrets
/etc/inetd.conf		/etc/vsftpd.conf	/etc/httpd.conf
/etc/misc.conf		/etc/inadyn.conf	/etc/ipkg.conf
/etc/ntp.conf		/etc/ntp.drift		/etc/adjtime.conf
/etc/sysctrl.conf	/etc/msmtprc		/etc/smartd.conf
/etc/wgetrc			/etc/ssl/certs/vsftpd.pem
"

# those are also used only when mounting/unmounting the aufs branch
xfiles="/etc/fstab /etc/bay"

if test $# = 0; then
	usage
fi

case $1 in
	"-ls") 	listflashdef ;;
	"-ll")	llistflashdef ;;
	"-lc")	listchanged ;;
	"-sf")	saveflashdef ;;
	"-lf")	arg=""
		if test $# = 2; then arg=$2; fi
		loadflashdef $arg
		;;
	"-cf")	clearflashdef ;;
	"-ta")	to_AltF ;;
	"-fa")	from_AltF ;;
	"-rs")	read_sib ;;
	"-st")	status ;;
	*)	usage ;;
esac
