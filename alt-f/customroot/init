#!/bin/sh

echo "pre-init started, pid=$$"

mount -t proc proc /proc

# enter iterative shell if cmdline has "initdbg"
# use with a plain gzip/lzma compressed initramfs
# and/or a non aufs/squashfs patched kernel
if grep -q "initdbg" /proc/cmdline; then
	echo "pre-init: initdbg"
	/bin/mount -t sysfs sysfs /sys
	/bin/mount -t tmpfs tmpfs /tmp
	/bin/mount -t devpts devpts /dev/pts
	/sbin/mdev -s				# create device nodes
	mkdir -p /var/run/vsftpd	# ftp needs it
	/usr/sbin/inetd				# telnet or ftp to the box
	exec /bin/sh				# enter iterative shell on serial line

# don't create aufs union branches -- can't install or use packages!
elif test -n "$(grep noaufs /proc/cmdline)" -o -z "$(grep aufs /proc/filesystems)"; then
	echo "pre-init: noaufs"
	if test -f /usr.squashfs -a -n "$(grep squashfs /proc/filesystems)"; then
		echo "pre-init: squashfs"
		mknod /dev/loop0 b 7 0
		mkdir -p /tmp/tmpusr
		mount /usr.squashfs /tmp/tmpusr
		mount -o bind /tmp/tmpusr/usr /usr
		umount /tmp/tmpusr
		rmdir /tmp/tmpusr
	fi
	umount /proc	
	exec /bin/busybox chroot / /sbin/init

# normal boot, create aufs union branches
else
	echo "pre-init: normal"
	# don't overlay, enable access to the union branches 
	mkdir /tmproot
	mount -t tmpfs tmpfs /tmproot
	mkdir /tmproot/root
	umount /proc # /proc must not be mounted during the next "cp -a"
	cp -a / /tmproot/root 
	mount -t proc proc /proc
	mkdir /newroot
	mount -t aufs -o dirs=/tmproot/root aufs /newroot
	if test -f /usr.squashfs -a -n "$(grep squashfs /proc/filesystems)"; then
		echo "pre-init: squashfs"
		mknod /dev/loop0 b 7 0
		mv /tmproot/root/usr.squashfs /tmproot
		mkdir -p /tmproot/rootsq
		mount -o loop /tmproot/usr.squashfs /tmproot/rootsq
		mount -t aufs -o remount,append:/tmproot/rootsq=rr aufs /newroot
	fi
	mkdir /newroot/rootmnt
	mount --move /tmproot /newroot/rootmnt	
	umount /proc
	rmdir /tmproot
	cd /newroot
	exec switch_root . sbin/init	
fi

# enter iterative shell on serial line if above fails
echo "pre-init: fail"
exec /bin/sh	
